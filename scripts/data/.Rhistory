typeof(z); class(z)
#6 Data frame
## Categorical Data
results <- c(1,3,2,4,3,2,1,3,2,2,); results
#6 Data frame
## Categorical Data
results <- c(1,3,2,4,3,2,1,3,2,2); results
results[1] <- 5; results
mean(results)
results
attributes(results)
fResults <- factor(results, levels = 1:4); fResults
attributes(results)
attributes(fResults)
fResults <- factor(results, levels=1:4); fResults
results[1] <- 1
fResults <- factor(results, levels=1:4); fResults
fResults[12] <- 5
fResults
fResults[12] <- 2; fResults
fResults[11] <- 4; fResults
mean(fResults)
levels(fResults)
levels(fResults) <- c("A", "B", "C", "None")
fResults
typeof(fResults)
class(fResults)
unclass(fResults)
levels(fResults)
fResults[11] <- 4
fResults[12] <- "None"; fResults
## Ordinal Data
satisfaction <- c("매우 불만", "매우 만족", "불만", "만족", "보통",
"불만", "매우 불만", "보통", "매우 만족", "불만")
fsatisfaction <- factor(satisfaction,
levels = c("매우 불만", "불만", "보통", "만족", "매우 만족"))
fsatisfaction
## Ordinal Data
satisfaction <- c("매우 불만", "매우 만족", "불만", "만족", "보통","불만", "매우 불만", "보통", "매우 만족", "불만")
fsatisfaction <- factor(satisfaction,
levels = c("매우 불만", "불만", "보통", "만족", "매우 만족"))
fsatisfaction
fsatisfaction >= "만족"
oSatisfaction <- factor(satisfaction, ordered = TRUE,
levels = c("매우 불만", "불만", "보통", "만족", "매우 만족")); oSatisfaction
oSatisfaction >= "만족"
sum(oSatisfaction >= "만족")
mean(oSatisfaction >= "만족")
order(oSatisfaction)
oSatisfaction
oSatisfaction <- factor(satisfaction, ordered = TRUE,
levels=c("매우 만족", "만족", "보통", "불만", "매우 불만"))
oSatisfaction
oSatisfaction >= "만족"
sum(oSatisfaction >= "만족")
mean(oSatisfaction >= "만족")
order(oSatisfaction)
fa1 <- factor(a); fa1
fa1 <- factor(a); fa1
a <- c("F", "M", "F", "M", "F")
fa1 <- factor(a); fa1
unclass(fa1)
table(fa1)
fa2 <- factor(a, levels = c("M", "F"))
fa2
unclass(fa2)
table(fa2)
fResults
fResults2 <- relevel(fResults, ref = "None"); fResults2
table(fResults2)
head(InsectSprays)
InsectSprays$spray
boxplot(count ~ spray, data = InsectSprays)
boxplot(count ~ reorder(spray, count, median), data=InsectSprays)
unclass(InsectSprays)
fa3 <- factor(a, levels = c("M", "F"), labels = c("Male", "Female")); fa3
unclass(fa3)
table(fa3)
fa3[6]
fa3[6] <- "M"
fa3[6] <- "Male"
fa3
# Day 12
## Make data frame
name <- c("Kim", "Lee", "Hung", "Joe", "Kaung")
grade <- c(1, 4, 3, 2,1)
gender <- c("M", "F", "M", "F", "M")
student <- data.frame(name, grade, gender)
student
### rbind()
a <- data.frame(name="Jane Eyre", grade=4, gender="F",
midterm=90, final=85, retake=F); a
rbind(student, a)
name <- c("Kim", "Lee", "Hung", "Joe", "Kaung")
grade <- c(1, 4, 3, 2,1)
gender <- c("M", "F", "M", "F", "M")
student <- data.frame(name, grade, gender)
student
final = c(91, 77, 88, 78, 86)
mindterm = c(74, 82, 67, 89,92)
scores = cbind(mindterm, final); scores
rf <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
student <- data.frame(student, scores, retake= rt); student
name <- c("Kim", "Lee", "Hung", "Joe", "Kaung")
grade <- c(1, 4, 3, 2,1)
gender <- c("M", "F", "M", "F", "M")
student <- data.frame(name, grade, gender)
student
mindterm = c(74, 82, 67, 89,92)
final = c(91, 77, 88, 78, 86)
scores = cbind(mindterm, final); scores
rf <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
student <- data.frame(student, scores, retake= rt); student
rt <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
students <- data.frame(student, scores, retake = rt)
students
total.scores <- mindterm + final ; total.scores
cbind(students, total.scores)
a <- data.frame(name="Jane Eyre", grade=4, gender="F",
midterm=90, final=85, retake=F); a
rbind(student, a)
rbind(students, a)
a <- data.frame(name="Jane Eyre", grade=4, gender="F",
mindterm=90, final=85, retake=F); a
rbind(students, a)
# Specifying each column of a data frame
typeof(students)
attributes(students)
students$gender
students[["mindterm"]]
students$mindterm[5] <- 50
student[[4]][3:5]
students[[4]][3:5]
students$hw <- c(8, 9, 7, 8, 10); students
# Filtering a data frame
students.new <- students[1:2]
students.new
students.new <- students[-(1:2)]
students.new
student.new <- students[c("gender", "grade")]
student.new
student.new <- students[c(T, F, F, T, T, F)]
student.new
height <- c(172, 167, 181, 162, 178)
students.new ,- data.frame(students[2:3]), height=height)
students.new <- data.frame(students[2:3]), height=height)
students.new <- data.frame(students[2:3], height=height)
student.new
students.new <- data.frame(students[2:3], height=height)
students.new
a <- student[2]; a
typeof(a)
attributes(a)
a <- students[[2]]; a
typeof(a)
attributes(a)
students[1,]
students[2:3, ]
students[-(2:3), ]
students[ ,4]
students[ ,-4]
students[ ,c(2, 4)]
students[2:4, 3:5]
students$mindterm >= 80
students[students$mindterm >= 80, ]
students[students$mindterm >= 80, c("name", "grade", "gender")]
students[students$grade != 1, c("name", "grade", "gender")]
order(students$grade)
students[order(students$grade), ]
order(students$final, decreasing = TRUE)
students[order(students$final, decreasing = TRUE), ]
order(students$grade, students$final)
students[order(students$grade, students$final), ]
students[order(students$grade, students$final, decreasing=T), ]
students[order(students$grade, students$final, decreasing=T), ]
students[order(students$grade, -students$final), ]
### subset()
x <- c(7, 9, NA, 5, 2)
x[x>6]
subset(x, x>6)
y <- 1:5
z <- -1 : -5
long.name <- data.frame(x, y, z); long.name
rm(x, y, z)
long.name[long.name$x > 6, ]
subset(long.name, x>6)
long.name[long.name$x >6, 2:3]
subset(long.name, x>6, y:z)
long.name[long.name$x >6, c("x", "z")]
subset(long.name, x>6, c(x, z))
subset(long.name, x>6, -z)
name <- c("kim", "young", "lee", "joe", "kung")
grade <- c(1, 4, 3, 2, 1)
gender <- c(" M", "F", "M", "F", "M")
student <- data.frame(name, grade, gender)
student
name <- c("kim", "young", "lee", "joe", "kung")
grade <- c(1, 4, 3, 2, 1)
gender <- c(" M", "F", "M", "F", "M")
student <- data.frame(name, grade, gender)
student
name <- c("kim", "young", "lee", "joe", "kung")
grade <- c(1, 4, 3, 2, 1)
gender <- c(" M", "F", "M", "F", "M")
student <- data.frame(name, grade, gender)
student
midterm = c(74, 82, 67, 89, 92)
final = c(91, 77, 88, 78, 86)
scores = cbind(midterm, final)
rt <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
students <- data.frame(student, scores, retake = rt)
students
lapply(students[4:5], mean)
sapply(students[4:5], mean)
sapply(students[4:5], summary)
nrow(students)
ncol(students)
t(students)
### apply()
apply(students, 2, mean)
name <- c("kim", "young", "lee", "joe", "kung")
grade <- c(1, 4, 3, 2, 1)
gender <- c(" M", "F", "M", "F", "M")
student <- data.frame(name, grade, gender)
student
midterm = c(74, 82, 67, 89, 92)
final = c(91, 77, 88, 78, 86)
scores = cbind(midterm, final)
rt <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
students <- data.frame(student, scores, retake = rt)
students
students$hw <- c(8, 9, 7, 8, 10)
### list function
lapply(students[4:5], mean)
sapply(students[4:5], mean)
sapply(students[4:5], summary)
### Matrix function
nrow(students)
ncol(students)
t(students)
### apply()
apply(students, 2, mean)
apply(students[4:5], 2, mean)
apply(students[4:5], 1, sum)
nrow(iris)
head(iris)
tail(iris)
head(iris,n = 3)
tail(iris,n = 3)
# File lord
WD <- getwd()
setwd(file.path(WD, "data"))
list.files(pattern = "txt")
WD <- getwd()
setwd(file.path(WD, "data"))
# File lord
WD <- getwd(); WD
# File lord
WD <- getwd(); WD
# File lord
WD <- getwd(); WD
setwd(file.path(WD, "data"))
# File lord
WD <- getwd();
# File lord
WD <- getwd()
setwd(file.path(WD, "data"))
# File lord
WD <- getwd(); WD
head(iris,n = 3)
list.files(pattern = "txt")
# File lord
WD <- getwd(); WD
setwd(file.path(WD, "data"))
# File lord
setwd("/Users/knu_cgl1/Desktop/Study/Obsidian/R_study/scripts")
WD <- getwd(); WD
setwd(file.path(WD, "data"))
# File lord
setwd("/Users/knu_cgl1/Desktop/Study/Obsidian/R_study/scripts/courses2")
WD <- getwd(); WD
setwd(file.path(WD, "data"))
# File lord
setwd("/Users/knu_cgl1/Desktop/Study/Obsidian/R_study/scripts/courses2")
WD <- getwd(); WD
# setwd(file.path(WD, "data"))
list.files(pattern = "txt")
prov.scores <- read.table("scores.txt", header = TRUE, fileEncoding = "UTF-8")
prov.scores
attributes(prov.scores)
list.files(pattern = "txt")[1]
list.files(pattern = "txt")[2]
prov.scores <- read.table(files_list[2], header = FALSE, fileEncoding = "UTF-8")
prov.scores
# setwd(file.path(WD, "data"))
files_list <- list.files(pattern = "txt")
attributes(prov.scores)
prov.scores <- read.table(files_list[2], header = FALSE, fileEncoding = "UTF-8")
prov.scores
prov.scores.new <- edit(prov.scores)
setwd("/Users/knu_cgl1/Desktop/Study/Obsidian/R_study/scripts")
sr <- read.csv(file = "suicide_rates.csv", fileEncoding = "UTF-8")
nrow(sr)
head(sr)
sr2 <- read.table(file = "suicide_rates.csv",header = TRUE, sep=",", fileEncoding = "UTF-8")
nrow(sr2)
head(sr2)
setwd("/Users/knu_cgl1/Desktop/Study/Obsidian/R_study/scripts/courses2")
prov.scores <- read.table("scores.txt", header=TRUE, fileEncoding="UTF-8")
prov.scores
prov.scores.csv <- read.csv("scores.txt", fileEncoding="UTF-8")
prov.scores.csv
mean(prov.scores$scores)
mean(prov.scores.csv$scores)
ncol(prov.scores)
names(prov.scores)
ncol(prov.scores.csv)
names(prov.scores.csv)
# write data.frame
sr$Avg <- (sr$Males + sr$Females) / 2
head(sr)
write.csv(sr, file = "sr.csv")
write.csv(sr, file = "sr2.csv", row.names = F)
setwd("/Users/knu_cgl1/Desktop/Study/Obsidian/R_study/scripts/data")
students
write.table(students, "students.txt", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(students, "students.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(students, "students_rn.txt", row.names = TRUE, fileEncoding = "UTF-8")
write.csv(students, "students_rn.csv", row.names = TRUE, fileEncoding = "UTF-8")
read.table("students.txt", header=TRUE, fileEncoding="UTF-8")
read.csv("students.csv", header=TRUE, fileEncoding="UTF-8")
write.table(students, "students.csv", sep=",", row.names=FALSE, fileEncoding="UTF-8")
write.table(students, "students_rn.csv", sep=",", row.names=TRUE, fileEncoding="UTF-8")
x <- 1:3; x
y <- matrix(4:12, nrow = 3, ncol = 3); y
z <- data.frame(x,y); z
save(x, y, z, file = "xyz.RData")
rm(x, y, z)
x; y; z
load("xyz.RData")
x; y; z
# Data frame
search()
obj <- ls()
rm(list = obj[which(obj ~= "students")])
ls()
rm(obj)
ls()
retake
attach(students)
retake
search()
retake[1] <- NA; retake
students$retake
students$retake[5] <- NA
students$retake
retake
detach(students)
search()
rm(list = obj[which(obj = "students")])
earch()
search()
obj <- ls()
rm(list = obj[which(obj = "students")])
# dplyr
library(tidyverse)
mpg
cat("--------------------------------------------------\n")
# dplyr
library(tidyverse)
mpg
### filter()
filter(mpg, manufacturer=="hyundai")
filter(mpg, cty> 28)
filter(mpg, cty >= 28)
filter(mpg, sqrt(cty) < 3.2)
filter(mpg, maunfacturer=="hyundai", cty>=20)
filter(mpg, manufacturer=="hyundai", cty>=20)
filter(mpg, manufacturer=="hyundai", cty>=20, displ >= 2.4)
filter(mpg, model=="sonata" | cty >= 28)
filter(mpg, model=="sonata" | cty >= 28, year == 2008)
filter(mpg, (model=="sonata" | cty >= 28) & year == 2008)
filter(mpg, model=="sonata" | cty >= 28 & year == 2008)
filter(mpg, year==2008, hwy >= 28, model == "sonata"| model == "corolla" | model == "jetta")
a <- 1:3
0 %in% a
1 %in% a
3 %in% a
filter(mpg, year==2008, hwy >= 28, model %in% c("sonata", "corolla", "jetta"))
# silce()
a <- filter(mpg, maunfacturer == "hyundai", year == 2008); a
# silce()
a <- filter(mpg, manufacturer == "hyundai", year == 2008); a
slice(a, 1)
slice(a, 1:3)
slice(a, 1:3, 6:7)
slice(a, -1)
slice(a, -1, -(4:6))
slice_sample(a, n=3)
slice_sample(a, prop = 0.8)
slice_head(mpg, n=4)
slice_tail(mpg, prop=0.05)
slice_min(a, cty, n=2)
slice_min(a, hwy, n=2)
slice_max(a, hwy, n=2)
# arrange()
a <- filter(mpg, manufacturer == "hyundai", year == 2008)
a
arrange(a, cyl)
arrange(a, cyl, cty)
arrange(a, model, trans)
arrange(a, desc(cyl))
arrange(a, desc(cyl), cty)
arrange(a, model, desc(trans))
# select()
select(a, model, year, cty, hwy)
select(a, model:trans)
select(a, model:trans, cty:hwy)
select(a, -(model:trans))
select(a, -(model:trans), -manufacturer)
select(a, 1:3)
select(a, 1:3, 5)
select(a, -(4:10))
select(a, starts_with("c"))
select(a, where(is.character))
select(a, where(function(x) is.numeric(x) && mean(x) >= 10))
select(a, where(~ is.numeric(.x) && mean(.x) < 10))
select(a, modelm city=cty, highway=hwy)
select(a, modelm, city=cty, highway=hwy)
select(a, model, city=cty, highway=hwy)
rename(a, city=cty, highway=hwy)
select(a, cty, hwy)
select(a, hwy, cty)
select(a, cty, hwy, everything())
# mutate()
b <- select(a, -(cyl:drv), -(fl:class)); b
mutate(b, sum=cty + hwy)
mutate(b,
sum=cty + hwy,
mean=(cty + hwy)/2,
ratio= cty / hwy * 100)
### transmute()
transmute(b,
sum=cty + hwy,
mean=(cty + hwy)/2,
ratio= cty / hwy * 100)
mutate(b, newName=paste(manufacturer, model, sep="-"), dis3=displ >= 3)
store <- data.frame(month=1:6, sales=c(23, 45, 34, 67, 30, 41)); store
mutate(stor,
before = lag(sales, n = 1),
after = lead(sales, n = 1),
total = cumsum(sales),
mean = cummean(sales),
rank1 = min_rank(sales),
rank2 = min_rank(desc(sales)))
mutate(store,
before = lag(sales, n = 1),
after = lead(sales, n = 1),
total = cumsum(sales),
mean = cummean(sales),
rank1 = min_rank(sales),
rank2 = min_rank(desc(sales)))
mutate(b, id = row_number())
# summarize()
summarise(b, count=n(), mean=mean(cty), med=median(cty),
min=min(cty), max=(cty))
# summarize()
summarize(b, count=n(), mean=mean(cty), med=median(cty),
min=min(cty), max=(cty))
# summarize()
summarize(b, count=n(), mean=mean(cty), med=median(cty),
min=min(cty), max=max(cty))
summarize(b, meanCty=mean(cty), meanHwy=mean(hwy),
medianCty=median(cty), medianHqy=median(hwy))
summarize(b, across(c(cty, hwy), mean))
summarize(b, across(c(cty, hwy), list(mean=mean, med=median)))
summarize(b,
across(c(cty, hwy), list(mean=mean, med=median), .names="{.fn}-{.col}"))
summarize(b, across(c(cty, hwy), mean, .names="mean-{.col}"),
across(c(cty, hwy), median, .names="med-{.col}"))
summarize(b, across(where(is.numeric), sd))
# group_by()
byModel <- group_by(b, model)
summarize(byModel, count=n(), mean=mean(cty), sd=sd(cty))
byModel
byModel <- group_by(a, model, cyl)
summarize(byModel, count=n(), mean=mean(cty))
mutate(b, rank=min_rank(desc(hwy)))
mutate(byModel, rank=min_rank(desc(hwy)))
##### count()
byModel <- group_by(b, model)
summarise(byModel, n=n())
count(b, model)
count(mpg, class)
count(mpg, class, sort = TRUE)
count(mpg, class, cyl, sort = T)
# pipe operator
byModel <- group_by(mpg, model, year)
meanCty <- summarize(byModel, count=n(), mean=mean(cty))
filter(meanCty, mean >= 22)
filter(summarize(group_by(mpg, model, year), count=n(), mean=mean(cty)), mean >= 22)
mpg %>% group_by(model, year) %>%
summarize(count=n(), mean=mean(cty)) %>%
filter(mean >= 22)
%>% filter(mean >= 20)
b %>% group_by(model) %>%
summarize(count=n(), mean=mean(cty)) %>% filter(mean >= 20)
byModel <- b %>% group_by(model)
byModel %>% summarize(count=n())
byModel %>% ungroup() %>% summarize(count=n())
# pipe operator
byModel <- group_by(mpg, model, year)
